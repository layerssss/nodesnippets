// Generated by IcedCoffeeScript 1.3.3e
(function() {
  var iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  exports.data = function(req, res, next) {
    var data, err, exists, ext, fs, nurl, path, type, url, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    nurl = require('url');
    fs = require('fs');
    path = require('path');
    url = nurl.parse(req.url);
    if (!url.query) url.query = '';
    url.pathname = url.pathname.replace(/_/g, '.');
    (function(__iced_k) {
      var _i, _len, _ref, _results, _while;
      _ref = ['.json', '.jsonp', '.yaml', '.mangled.yaml'];
      _len = _ref.length;
      _i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          ++_i;
          return _while(__iced_k);
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(_i < _len)) {
          return _break();
        } else {
          e = _ref[_i];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "routes/data.iced",
              funcname: "data"
            });
            fs.exists(path.dirname(path.dirname(path.dirname(__dirname))) + url.pathname + e, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return exists = arguments[0];
                };
              })(),
              lineno: 10
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(exists ? ext = e : void 0);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      if (url.query.match('dataType=json') || (req.headers['accept'] && req.headers['accept'].match(/json/))) {
        type = 'json';
      }
      if (url.query.match('dataType=jsonp') || (req.headers['accept'] && req.headers['accept'].trim().match(/^text\/javascript/))) {
        type = 'jsonp';
      }
      if (url.query.match('dataType=yaml') || (req.headers['accept'] && req.headers['accept'].match(/yaml/))) {
        type = 'yaml';
      }
      if (!(type != null) || !(typeof ext !== "undefined" && ext !== null)) {
        return next();
      }
      err = {};
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return _while(__iced_k);
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (err == null) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "routes/data.iced",
                funcname: "data"
              });
              fs.readFile(path.dirname(path.dirname(path.dirname(__dirname))) + url.pathname + ext, 'utf8', __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 23
              }));
              __iced_deferrals._fulfill();
            })(_next);
          }
        };
        _while(__iced_k);
      })(function() {
        try {
          if (ext === '.yaml' || ext === '.mangled.yaml') {
            data = require('js-yaml').load(require('../../unmangle/unmangle').unmangle(data, url.query));
          }
          if (ext === '.json') data = JSON.parse(data);
          if (ext === '.jsonp') {
            data = data.match(/[^\(]+\((.+)\);[\r\n\s\t]*$/)[1];
            eval('data=' + data + ';');
            if (String(data.statusCode) === '200') {
              data = data.data;
            } else {
              throw new Error('status:' + d.statusCode);
            }
          }
        } catch (e) {
          res.write(String(e));
          res.end();
          res.statusCode === 500;
          return;
        }
        if (type === 'json') {
          res.setHeader('Content-Type', 'text/json;charset=utf-8');
          res.write(JSON.stringify(data));
        }
        if (type === 'jsonp') {
          res.setHeader('Content-Type', 'text/javascript;charset=utf-8');
          res.write((url.query.match(/callback=([^&]*)/) || ['', 'dSet'])[1]);
          res.write('({"statusCode":200,"data":');
          res.write(JSON.stringify(data));
          res.write('});');
        }
        if (type === 'yaml') {
          res.setHeader('Content-Type', 'text/yaml;charset=utf-8');
          res.wrte('not support');
        }
        return res.end();
      });
    });
  };

}).call(this);
