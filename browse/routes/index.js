// Generated by IcedCoffeeScript 1.3.3e
(function() {
  var iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  exports.index = function(req, res) {
    var arr, breadcrumb, curPath, err, error, files, fs, i, link, path, priv, root, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    fs = require('fs');
    path = require('path');
    root = path.dirname(path.dirname(path.dirname(__dirname)));
    curPath = root + req.params[0];
    console.log(curPath);
    arr = req.params[0].split('/');
    link = '';
    breadcrumb = [
      {
        text: 'Browse',
        link: '/'
      }
    ];
    for (i = _i = 0, _ref = arr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (arr[i] !== '') {
        link += '/' + arr[i];
        breadcrumb[breadcrumb.length] = {
          text: arr[i],
          link: link
        };
      }
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "routes/index.iced",
        funcname: "index"
      });
      fs.readdir(curPath, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return files = arguments[1];
          };
        })(),
        lineno: 18
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (typeof error !== "undefined" && error !== null) {
        console.error(error);
        res.statsCode = 404;
        res.setHeader('Content-Type', 'text/html');
        res.write("no.....it's not here anymore... <br/><br/><br/><br/><br/><a href=\"/\">!!!!!!!!!!!!TAKE ME BACK!!!!!!!!!!!!</a>");
        res.end();
        return;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "routes/index.iced",
          funcname: "index"
        });
        fs.readFile(curPath + '/.private', 'utf8', __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return priv = arguments[1];
            };
          })(),
          lineno: 27
        }));
        __iced_deferrals._fulfill();
      })(function() {
        files = files.map(function(file) {
          var ext, line, obj, stat, _j, _len, _ref1;
          if (typeof priv !== "undefined" && priv !== null) {
            _ref1 = priv.split('\n');
            for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
              line = _ref1[_j];
              if (file.match(line) && file.match(line)[0].length === file.length) {
                return null;
              }
            }
          }
          try {
            stat = fs.statSync(curPath + '/' + file);
          } catch (e) {
            return null;
          }
          obj = {
            stat: stat,
            filename: file,
            icon: 'icon-folder-2'
          };
          if (stat.isFile()) {
            obj.icon = 'icon-paper';
            ext = path.extname(file);
            if (ext === '.yaml' || ext === '.xml') obj.icon = 'icon-file-xml';
            if (ext === '.html' || ext === '.htm') obj.icon = 'icon-html5-2';
            if (ext === '.gz' || ext === '.tar' || ext === '.rar' || ext === '.zip' || ext === '.msi' || ext === '.pkg' || ext === '.exe' || ext === '.deb') {
              obj.icon = 'icon-file-zip';
            }
            if (ext === '.sass' || ext === '.css' || ext === '.less' || ext === '.coffee' || ext === '.iced' || ext === '.js') {
              obj.icon = 'icon-file-css';
            }
          }
          return obj;
        });
        files = files.filter(function(file) {
          return file !== null && file.filename[0] !== '.' && !file.filename.match(/~$/);
        });
        files = files.sort(function(a, b) {
          if (a.filename < b.filename) return -1;
          if (a.filename === b.filename) return 0;
          return 1;
        });
        return res.render('index', {
          title: 'Browse - ' + req.params[0],
          files: files.filter(function(file) {
            return file.stat.isFile();
          }),
          folders: files.filter(function(file) {
            return file.stat.isDirectory();
          }),
          dir: req.params[0],
          breadcrumb: breadcrumb,
          nav: {
            index: 'active'
          }
        });
      });
    });
  };

  exports.makeresult = require('./makeresult').makeresult;

  exports.make = require('./make').make;

  exports.data = require('./data').data;

  exports.edit = require('./edit').edit;

  exports.view = require('./view').view;

  exports.renderhtml = require('./renderhtml').renderhtml;

}).call(this);
